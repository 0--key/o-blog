#+TITLE: o-blog
#+DESCRIPTION: standalone blogging system for org-mode
#+DATE:

#+STARTUP: logdone

#-TEMPLATE_DIR: templates
#+URL: http://renard.github.com/o-blog


#+POST_BUILD_SHELL: cmd 1
#+POST_BUILD_SHELL: cmd 2
#+POST_BUILD_SHELL: cmd 3
#+POST_BUILD_SHELL: cmd 4


* Quick start Guide
  :PROPERTIES:
  :PAGE:     index.html
  :END:

This is a sample website to show how to use [[https://github.com/renard/o-blog][o-blog]].

First you need:

- [[http://www.gnu.org/s/emacs][emacs]] (I assume you already have it)
- [[http://orgmode.org/][org-mode]] (same as above)

If you don't have them, you should install them fist.

** Setup

*** Using =el-get=

If you are using [[https://github.com/dimitri/el-get][el-get]] it would be very easy to install. All you need to do
is to add =o-blog= to =el-get-sources= and type =M-x el-get-install o-blog=.

If you are using =el-get= 4 or greater, you only need to type: =M-x
el-get-install o-blog=.

*** Manual setup

Start by cloning the /git/ repository from [[http://github.com][Github]].

#+begin_src bash
cd ~/.emacs.d
git clone https://github.com/renard/o-blog.git
#+end_src

And add following to your =~/.emacs.d/init.el= file:

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/o-blog")
  (require 'o-blog)
#+end_src

** Publish

Open the =~/.emacs.d/o-blog/example/sample.org= file and type =M-x
org-publish-blog=. The result site would be published by default in
=~/.emacs.d/o-blog/out=.

See the [[file:blog/index.html][blog]] for more details.


* Blog details
** Copyright
  :PROPERTIES:
  :SNIPPET:  t
  :END:

Copyright © 2008-2012 [[mailto:seb%2520%E2%9D%A8%C9%91%C6%A6%C9%B5%CF%90%C9%91%CA%82%C9%9B%E2%9D%A9%2520chezwam%2520%E2%9D%A8%C6%A4%C9%B5%C9%A9%C9%B2%CA%88%E2%9D%A9%2520org][Sébastien Gross]]. Published under the therm of the
[[http://creativecommons.org/licenses/by-nc-sa/2.0/fr/][Creative Commons Attribution-Noncommercial-Share Alike 2.0 France License]].

** About
  :PROPERTIES:
  :SNIPPET:  t
  :END:

This is a sample blog to explain how [[https://github.com/renard/o-blog][o-blog]] works.

** Navigation
  :PROPERTIES:
  :SNIPPET:  t
  :END:

- [[file:{lisp}(ob:path-to-root){/lisp}/index.html][Home]]
- [[file:{lisp}(ob:path-to-root){/lisp}/features.html][Features]]
- [[#][Documentation]]
  - [[file:{lisp}(ob:path-to-root){/lisp}/templates.html][Templates]]
  - [[file:{lisp}(ob:path-to-root){/lisp}/structures.html][Structures]]
  - [[file:{lisp}(ob:path-to-root){/lisp}/functions.html][Functions]]
  -
  - [[file:{lisp}(ob:path-to-root){/lisp}/faq.html][FAQ]]
- [[#][Blog]]
  - [[file:{lisp}(format%20"%25s/%25s"%20(ob:path-to-root)%20(ob:post-htmlfile%20(ob:get-last-post%20"blog"%200))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "blog" 0)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "blog" 1))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "blog" 1)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "blog" 2))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "blog" 2)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "blog" 3))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "blog" 3)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "blog" 4))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "blog" 4)){/lisp}]]
- [[file:{lisp}(ob:path-to-root){/lisp}/tags/index.html][Tags]]
- [[file:{lisp}(ob:path-to-root){/lisp}/archives.html][Archives]]
- [[file:{lisp}(ob:path-to-root){/lisp}/index.xml][RSS]]
- [[file:{lisp}(ob:path-to-root){/lisp}/debug.html][(debug)]]


* Documentation
** Debug
   :PROPERTIES:
   :PAGE:     debug.html
   :TEMPLATE: debug.html
   :END:


** Features
  :PROPERTIES:
  :PAGE:     features.html
  :END:

- Appearance
  - Dynamic template system (using lisp functions) with [[file:{lisp}(ob:path-to-root){/lisp}/debug.html][nice debugging features]]
  - Syntax highlighting for exported code snippets
  - [[http://twitter.github.com/bootstrap/][bootstrap]] support
  - [[http://lesscss.org/][lesscss]] support
  - [[http://jquery.com/][JQuery]] support
  - HTML5 / CSS3 ready
- Blog
  - Static pages
  - [[file:{lisp}(ob:path-to-root){/lisp}/tags/index.html][Tag cloud]]
  - Multiple blogs
  - [[file:{lisp}(ob:path-to-root){/lisp}/archives.html][Archives]]
- Publication
  - Both synchrone and asynchrone publication
  - Publish directly to the webserver (using tramp)
- [[http://orgmode.org/][Org-mode]] extra
  - Messages box such as admonition

** Templates
  :PROPERTIES:
  :PAGE:     templates.html
  :END:

Templates which are a big part of the [[https://github.com/renard/o-blog][o-blog]] export process, are HTML-based
files. Lisp code could be interpreted as long as =<lisp>= tags surrounds it.

#+begin_src html
<h1><lisp>(ob:blog-title BLOG)</lisp></h1>
#+end_src

The previous snippet would be exported to something similar to:

#+begin_src html
<h1>o-blog</h1>
#+end_src

#+begin_admonition info Information
[[https://github.com/renard/o-blog][o-blog]] only needs =blog_= prefixed templates as long as they do not need any
other templates (using =ob:insert-template= function).

All other templates are defined for convenience.
#+end_admonition


*** Required templates

=blog_= prefixed templates.

 - =blog_static.html=: exports any static page (function =ob-write-static=).
 - =blog_post.html=: exports a blog post (function =ob-write-posts=).
 - =blog_tags.html=: exports a tag cloud page (function =ob-write-tags=).
 - =blog_tags-detail.html=: exports page matching a specific tag (function
   =ob-write-tags=).
 - =blog_archive.html=: exports the whole archives (all categories, all
   years, all months) page (function =ob-write-index=).
 - =blog_rss.html=: exports the rss feed (function =ob-write-index=).
 - =blog_index_month.html= export index page for a given month (function
   =ob-write-index=).
 - =blog_index_year.html= export index page for a given year (function
   =ob-write-index=).
 - =blog_index_catery.html= export index page for a given category (function
   =ob-write-index=).

*** index templates

=index_= prefixed templates. They are used my all =blog_index_*.html=
templates to generate a list of articles matching given category, year and
month and the whole archives.

 - =index_archives.html=
 - =index_category.html=
 - =index_month.html=
 - =index_year.html=

*** Navigation templates

=nav_= prefixed templates used to generate navigation snippets:

 - =nav_links.html=: used to generate navigation menu used in both page
   header and footer.
 - =nav_tag-cloud.html=: used to generate tag cloud on page bottom.

*** Page templates

=page_= prefixed templates used for both html header and footer.


** Structures
  :PROPERTIES:
  :PAGE:     structures.html
  :END:

Some variables are available when publishing lisp parts of templates. These
variables are defined using [[http://www.gnu.org/software/emacs/manual/html_node/cl/Structures.html][defstruct]], then any slot (or property) is
available using a =(type-slot variable)= form.

*** Structures

**** =ob:blog=

Structure used to define a blog:

 - =file=: the blog source file (read-only).
 - =buffer=: buffer visiting the blog file (read-only).
 - =publish-dir=: where to publish the blog defined by the =#+PUBLISH_DIR:=
   header directive or =out= in the same directory as the blog source file.
 - =template-dir=: location of the template directory defined by the
   =#+TEMPLATE_DIR:= header directive or the =templates= directory of the
   =o-blog= library.
 - =style-dir=: path of the /css/ files defined by the =#STYLE_DIR:= header
   directive or =style=. This directory is relative to =template-dir=.
 - =posts-filter=: default filter for post defined by the =#POSTS_FILTER:=
   header directive or =+TODO={DONE}=.
 - =static-filter=: default filter for static pages defined by the
   =#STATIC_FILTER:= header directive or =+PAGES={.*}=.
 - =snippet-filter=  default filter for snippets defined by the
   =#SNIPPET_FILTER:= header directive or =+SNIPPET={.*}=.
 - =title=: Blog title defined by the =#+TITLE:= header directive.
 - =description=: blog description defined by the =#+DESCRIPTION:= header
   directive.

Example:

#+begin_src emacs-lisp
;; get the title of the current blog defined in variable BLOG.
(ob:blog-title BLOG)
#+end_src

**** =ob:post=

 - =id=: the post numerical id. Posts are sort by reversed chronological
   order. The most recent post get the id 0.
 - =title=: the post title read from the entry title. 
 - =timestamp=: the post timestamp given by the =CLOSED= property or the
   current time.
 - =year=: numerical year computed from =timestamp=.
 - =month=: numerical month computed from =timestamp=.
 - =day=: numerical day computed from =timestamp=.
 - =category=: category read from =CATEGORY= property org =blog=.
 - =tags=: list of tags read from =tags= property (comma separated).
 - =template=: template to use for current post read from =TEMPLATE=
   property or =blog_post.html=.
 - =filepath=: relative path from the blog root directory to the post
   directory (directory only).
 - =filename=: sanitized filename generated from =title=.
 - =htmlfile=: full relative path to the post html file (file and
   directory).
 - =path-to-root=: relative path from the post html file to the blog root.
 - =content=: raw content of the post (org-mode format).
 - =content-html=: HTML export of the post.

Example:

#+begin_src emacs-lisp
;; get the HTML content of the post defined in variable POST.
(ob:post-content-html POST)
#+end_src

**** =ob:tags=

Structure used to define a tag:

 - =name=: string defying the tag name.
 - =count=: how many time the tag is used.
 - =size=: the font size in percent.

Example:

#+begin_src emacs-lisp
;; get the name of the tag defined in variable TAG.
(ob:tags-name TAG)
#+end_src

*** Variables

Following variables are always available when publishing a blog:

 - =BLOG= (=ob:blog=): information about the blog being published.
 - =POSTS= (list of =ob:post=): list of all posts of the blog or restricted
   list of posts (depending what is exported).
 - =ALL-POSTS=: A copy of =POSTS= except this *always* contents all the
   posts from the blog.
 - =STATIC= (list of =ob:post=): list of static pages.
 - =SNIPPETS= (list of =ob:post=): list of snippets pages.
 - =TAGS= (list of =ob:tags=): list of all tags.

Some variables may be defined in some functions:

 - =POST= (=ob:post=): post (or static page) being currently published.
 - =TAG= (=ob:tags=): tag being currently published.
 - =CATEGORY= (=string=): the category being published.
 - =YEAR=, =MONTH (=integer=): the year and month being published.
 - =PATH-TO-ROOT= (=string=): (intern use only, use =ob:path-to-root=
   instead) path to blog root used by =ob:path-to-root=.

** Functions
  :PROPERTIES:
  :PAGE:     functions.html
  :END:

Basically any lisp function could be used withing a blog template as long as
they are known when exporting. Meanwhile some of them are specifically made
to be used withing templates. These functions are prefixed by =ob:=.

Descriptions are taken from function docstrings.

*** =(ob:get-posts &optional PREDICATE COUNT SORTFUNC COLLECT)=

Return posts (from =POSTS= as defined in =org-publish-blog=) matching
=PREDICATE=. Limit to =COUNT= results if defined and sorted using
=SORTFUNC=.

=PREDICATE= is a function run for each post with the post itself as
argument. If =PREDICATE= is nil, no filter would be done on posts.

=SORTFUNC= is used a =sort= =PREDICATE=.

If =COLLECT= is defined, only returns the =COLLECT= field of a
=ob:post= structure.

Examples:

Getting last 10 posts:

#+begin_src emacs-lisp
   (ob:get-posts nil 10)
#+end_src


Getting post from January 2012:

#+begin_src emacs-lisp
   (ob:get-posts
      (lambda (x)
         (and (= 2012 (ob:post-year x))
              (= 1 (ob:post-month x)))))
#+end_src

Getting all categories:

#+begin_src emacs-lisp
    (ob:get-posts nil nil nil 'category)
#+end_src


**** Template usages

For archive navigation:

#+begin_src html
  <nav id="archives">
    <h1>Archives</h1>
    <ul>
      <lisp>
        (loop for p in (ob:get-posts nil 10)
              do (insert (format "<li><a href=\"%s/%s\">%s</a></li> "
                                 (ob:path-to-root)
                                 (ob:post-htmlfile p)
                                 (ob:post-title p))))
      </lisp>
    </ul>
  </nav>
#+end_src

*** =(ob:get-post-by-id ID)=

Return post which id is =ID=.

**** Template usages

Posts navigation:

#+begin_src html
  <nav class="articles-nav">
    <ul>
      <lisp>
        (progn
          ;; Get previous post
          (let ((ppost (ob:get-post-by-id (1+ (ob:post-id POST)))))
            (if ppost
                (insert (format "<li class=\"prev\"><a href=\"%s/%s\">%s</a></li>"
                                (ob:path-to-root)
                                (ob:post-htmlfile ppost)
                                (ob:post-title ppost)))
              (insert "<li>&nbsp;</li>")))
          ;; Get next post
          (let ((npost (ob:get-post-by-id (1- (ob:post-id POST)))))
            (if npost
                (insert (format "<li class=\"next\"><a href=\"%s/%s\">%s</a></li>"
                                (ob:path-to-root)
                                (ob:post-htmlfile npost)
                                (ob:post-title npost)))
              (insert "<li>&nbsp;</li>"))))
      </lisp>
    </ul>
  </nav>
#+end_src

*** =(ob:get-snippet NAME)=

Get first snippet matching =NAME=.

**** Template usages

Insert the /About/ section in page footer:

#+begin_src html
  <h1>About</h1>
  <address>
    <lisp>(ob:post-content-html (ob:get-snippet "About"))</lisp>
  </address>
#+end_src

*** =(ob:get-header HEADER &optional ALL)=

Get =HEADER= from blog buffer as defined in =BLOG= global context variable.

Returns only fist match except if =ALL= is defined.

**** Template usages

Get the last updated header for rss export:

#+begin_src html
  <updated><lisp>(ob:format-date (ob:get-header "DATE"))</lisp></updated>
#+end_src

*** =(ob:insert-template TEMPLATE)=

Insert =TEMPLATE= in current buffer.

**** Template usages

Insert html header:

#+begin_src html
  <lisp>(ob:insert-template "page_header.html")</lisp>
#+end_src

*** =(ob:format-date DATE &optional FORMAT LOCALE)=

Format =DATE= using =FORMAT= and =LOCALE=.

=DATE= can heither be string suitable for =parse-time-string= or a list of
interger using =current-time= format.

=FORMAT= is a =format-time-string= compatible definition. If not
set ISO8601 =%Y-%m-%dT%TZ= format would be used.

**** Template usages

Add a human readable timestamp for a post:

#+begin_src html
  Posted on <time datetime="<lisp> (ob:format-date (ob:post-timestamp POST)) </lisp>">
    <lisp> (ob:format-date (ob:post-timestamp POST) "%A %B, %d %Y at %H:%M:%S") </lisp>
  </time>.
#+end_src


** FAQ
  :PROPERTIES:
  :PAGE:     faq.html
  :END:

*** My page looks ugly

Maybe you are using [[https://www.google.com/chrome/][google-chrome]] and try to view your site locally using a
=file:///path/to/your/site/out/index.html= scheme. Open the javascript console
=Ctrl+Shift+I= you should see something like:

#+begin_example
XMLHttpRequest cannot load file:///path/to/your/site/out/out/style/css/o-blog.less. Cross origin requests are only supported for HTTP.
less-1.2.1.min.js:8Uncaught Error: NETWORK_ERR: XMLHttpRequest Exception 101
#+end_example

There is a known Chrome issue with loading local javascript files. This is a
/security feature/ in Chrome.

You can disable this with the =--allow-file-access-from-files= option to
chrome or you can use an other browser or setup a local webserver.

There are many complex solutions for a webserver such as [[http://nginx.org/][nginx]] or [[http://httpd.apache.org/][Apache]] or
many [[http://en.wikipedia.org/wiki/Comparison_of_web_server_software][others]].

You may want to prefer a lighter and simpler solution.

With python simply run:

#+begin_src sh
cd /path/to/your/site && python -m SimpleHTTPServer
#+end_src

And browse http://localhost:8000

Or within emacs you can run [[https://github.com/jrhbailey/emacs-http-server][emacs-http-server]]:

#+begin_src emacs-lisp
(require 'httpd)
(setq httpd-root "/path/to/your/site")
(httpd-start)
#+end_src

and browse http://localhost:8080

An other alternative would be the use of [[http://www.emacswiki.org/emacs/Elnode][elnode]] but it seems to be more
complex.

* Blog entries
** DONE Creating a blog
  CLOSED: [2012-01-07 Sat 00:13]
  :PROPERTIES:
  :tags:     usage, o-blog
  :END:

A blog consists of org entries. Each entry has a title, some properties and
some text. Exporting a blog means publishing all entries with a =DONE=
=TODO=.

A minimal blog file could be something like:

#+begin_src org
  
  ,#+TITLE: Lorem ipsum
  ,#+DESCRIPTION: dolor sit amet
  ,#+DATE:
  
  ,#+STARTUP: logdone
  
  ,#+URL: http://blog.example.com
  
  ,* DONE Lorem ipsum
  ,  CLOSED: [2012-01-07 Sat 00:13]
  ,  :PROPERTIES:
  ,  :tags:     Lorem
  ,  :END:
  
  ,  Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
  ,  tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt
  ,  et, mattis eget, convallis nec, purus. Cum sociis natoque penatibus et
  ,  magnis dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec
  ,  vitae dolor. Nullam tristique diam non turpis. Cras placerat accumsan
  ,  nulla. Nullam rutrum. Nam vestibulum accumsan nisl.
  
#+end_src

Please note the blank line between the properties section and the text itself.

Use =#+STARTUP: logdone= to automatically add a time stamp when closing an
entry.

** DONE How to use tags
  CLOSED: [2012-01-07 Sat 00:28]
  :PROPERTIES:
  :tags:     usage, o-blog
  :END:

Tags are useful to classify articles. They are stored in the =tags= property
for each entries. They are not defined as =org= tags to allows any character
but comma (",") to be used.

To add or modify a tag for a post, just use =C-c C-x p tags= and enter the
tag value.

If an article has more than one tag, separate them by a comma (","). 

** DONE Example of some org syntax
   CLOSED: [2012-01-07 Sat 11:23]
   :PROPERTIES:
   :tags:     usage, org
   :END:
   
*** Titles

This is a level 1

**** Level 2

This is a level 2


***** Level 3

This is a level 3

****** Level 4

This is a level 4

Up to 4 levels of indentation could be used.

*** Praragaphs

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt et,
mattis eget, convallis nec, purus. Cum sociis natoque penatibus et magnis
dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec vitae
dolor. Nullam tristique diam non turpis. Cras placerat accumsan
nulla. Nullam rutrum. Nam vestibulum accumsan nisl.

#+html: <div class="two-cols">

Nullam eu ante vel est convallis dignissim. Fusce suscipit, wisi nec
facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis
odio. Nunc porta vulputate tellus. Nunc rutrum turpis sed pede. Sed
bibendum. Aliquam posuere. Nunc aliquet, augue nec adipiscing interdum,
lacus tellus malesuada massa, quis varius mi purus non odio. Pellentesque
condimentum, magna ut suscipit hendrerit, ipsum augue ornare nulla, non
luctus diam neque sit amet urna. Curabitur vulputate vestibulum lorem. Fusce
sagittis, libero non molestie mollis, magna orci ultrices dolor, at
vulputate neque nulla lacinia eros. Sed id ligula quis est convallis
tempor. Curabitur lacinia pulvinar nibh. Nam a sapien.

Pellentesque dapibus suscipit ligula. Donec posuere augue in quam. Etiam vel
tortor sodales tellus ultricies commodo. Suspendisse potenti. Aenean in sem
ac leo mollis blandit. Donec neque quam, dignissim in, mollis nec, sagittis
eu, wisi. Phasellus lacus. Etiam laoreet quam sed arcu. Phasellus at dui in
ligula mollis ultricies. Integer placerat tristique nisl. Praesent
augue. Fusce commodo. Vestibulum convallis, lorem a tempus semper, dui dui
euismod elit, vitae placerat urna tortor vitae lacus. Nullam libero mauris,
consequat quis, varius et, dictum id, arcu. Mauris mollis tincidunt
felis. Aliquam feugiat tellus ut neque. Nulla facilisis, risus a rhoncus
fermentum, tellus tellus lacinia purus, et dictum nunc justo sit amet elit.

#+html: </div>


#+begin_verse
Great clouds overhead
Tiny black birds rise and fall
Snow covers Emacs

-- AlexSchroeder
#+end_verse

#+begin_quote
Everything should be made as simple as possible,
but not any simpler -- Albert Einstein
#+end_quote

#+BEGIN_CENTER
Everything should be made as simple as possible, \\
but not any simpler
#+END_CENTER

*** Lists

As taken from org manual:

My favorite scenes are (in this order)
        1. The attack of the Rohirrim
        2. Eowyn's fight with the witch king
           + this was already my favorite scene in the book
           + I really like Miranda Otto.
        3. Peter Jackson being shot by Legolas
           - on DVD only
           He makes a really funny face when it happens.
But in the end, no individual scenes matter but the film as a whole.
Important actors in this film are:
        - Elijah Wood :: He plays Frodo
        - Sean Austin :: He plays Sam, Frodo's friend.  I still remember
          him very well from his role as Mikey Walsh in The Goonies.

*** Footnotes

The Org homepage[fn:1] now looks a lot better than it used to.

[fn:1] The link is: http://orgmode.org

*** Emphasis and monospace

You can make words *bold*, /italic/, _underlined_, =code= and ~verbatim~,
and, if you must, ‘+strike-through+’. Text in the code and verbatim string
is not processed for Org mode specific syntax; it is exported verbatim.

*** Horizontal rules

A line consisting of only dashes, and at least 5 of them, will be exported
as a horizontal line (‘<hr/>’ in HTML and \hrule in LaTeX).

------

As shown previously.

*** Comment lines

Lines starting with ‘#’ in column zero are treated as comments and will
never be exported. If you want an indented line to be treated as a comment,
start it with ‘#+ ’. Also entire subtrees starting with the word ‘COMMENT’
will never be exported. Finally, regions surrounded by ‘#+BEGIN\_COMMENT’
... ‘#+END\_COMMENT’ will not be exported.

#+begin_comment
C-c ;
Toggle the COMMENT keyword at the beginning of an entry.
#+end_comment

*** Images and Tables

Table

#+CAPTION: This is the caption for the next table (or link)
#+LABEL:   tbl:basic-data
|----------+----------+----------+----------+----------------------------------------------------------------------|
| Header 1 | Header 2 | Header 3 | Header 4 | Header 5                                                             |
|----------+----------+----------+----------+----------------------------------------------------------------------|
|      1.1 |      1.2 |      1.3 | X        | This /cell/ has a *very* =long= ~line~ _with_  _{special} ^{layouts} |
|      2.1 |      2.2 |      3.3 | Y        |                                                                      |
|----------+----------+----------+----------+----------------------------------------------------------------------|
|      3.1 |      3.1 |      C.1 | D.1      | E.1                                                                  |
|----------+----------+----------+----------+----------------------------------------------------------------------|


Image

#+CAPTION: This is the caption for the next figure link (or table)
#+LABEL:   fig:SED-HR4049
[[file:200px-Org-mode-unicorn.svg.png][file:org-mode-unicorn.png]]

*** Literal examples

#+BEGIN_EXAMPLE
Some example from a text file.
#+END_EXAMPLE


Here is an example
        : Some example from a text file.

#+BEGIN_SRC emacs-lisp
  (defun org-xor (a b)
    "Exclusive or."
    (if a (not b) b))
#+END_SRC

#+BEGIN_SRC emacs-lisp -n -r
  (save-excursion                  (ref:sc)
     (goto-char (point-min)))       (ref:jump)
#+END_SRC

In line [[(sc)]] we remember the current position.  [[(jump)][Line (jump)]]
jumps to point-min.

*** Special symbols

Angles are written as Greek letters \alpha, \beta and \gamma.

*** Subscripts and superscripts

The mass of the sun is M_sun = 1.989 x 10^30 kg.  The radius of
the sun is R_{sun} = 6.96 x 10^8 m.

*** links

- outsite (page): [[https://github.com/renard/o-blog][/o-blog/ home]].
- [[Creating a blog]]
- insite (file): [[file:o-blog.el]]
- in page (anchor): [[Literal examples]]
** DONE Some HTML5 samples
   CLOSED: [2012-01-10 Tue 20:58]
   :PROPERTIES:
   :tags:     html5
   :END:

*** tag: <details>

Works only with chrome.

#+HTML: <details>
#+HTML: <summary>Lorem ipsum dolor sit amet, consectetuer adipiscing elit</summary>
- Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
- Proin quam nisl, tincidunt et, mattis eget, convallis nec, purus.
- Sed diam.
- Nam vestibulum accumsan nisl.
#+HTML: </details>

#+begin_src org
  ,#+HTML: <details>
  ,#+HTML: <summary>Lorem ipsum dolor sit amet, consectetuer adipiscing elit</summary>
  ,- Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
  ,- Proin quam nisl, tincidunt et, mattis eget, convallis nec, purus.
  ,- Sed diam.
  ,- Nam vestibulum accumsan nisl.
  ,#+HTML: </details>
#+end_src

** DONE Admonitions
   CLOSED: [2012-01-15 Sun 20:40]
   :PROPERTIES:
   :tags:     usage
   :END:

Admonitions are declared in =admonition= blocks. There are 4 types of them:

 - info
 - success
 - warning
 - error

#+begin_src org
  ,#+begin_admonition <TYPE> <title>
  ,Text of the admonition
  ,#+end_admonition
#+end_src


#+begin_admonition error

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt et,
mattis eget, convallis nec, purus. Cum sociis natoque penatibus et magnis
dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec vitae
dolor. Nullam tristique diam non turpis. Cras placerat accumsan
nulla. Nullam rutrum. Nam vestibulum accumsan nisl.

#+end_admonition


#+begin_admonition error Danger

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt et,
mattis eget, convallis nec, purus. Cum sociis natoque penatibus et magnis
dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec vitae
dolor. Nullam tristique diam non turpis. Cras placerat accumsan
nulla. Nullam rutrum. Nam vestibulum accumsan nisl.

#+end_admonition

#+begin_admonition warning Caution

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt et,
mattis eget, convallis nec, purus. Cum sociis natoque penatibus et magnis
dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec vitae
dolor. Nullam tristique diam non turpis. Cras placerat accumsan
nulla. Nullam rutrum. Nam vestibulum accumsan nisl.

#+end_admonition



#+begin_admonition success Tip

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt et,
mattis eget, convallis nec, purus. Cum sociis natoque penatibus et magnis
dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec vitae
dolor. Nullam tristique diam non turpis. Cras placerat accumsan
nulla. Nullam rutrum. Nam vestibulum accumsan nisl.

#+end_admonition

#+begin_admonition info Information

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt et,
mattis eget, convallis nec, purus. Cum sociis natoque penatibus et magnis
dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec vitae
dolor. Nullam tristique diam non turpis. Cras placerat accumsan
nulla. Nullam rutrum. Nam vestibulum accumsan nisl.

#+end_admonition

